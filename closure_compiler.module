<?php
// $Id$

define("CLOSURE_COMPILER_SERVICE_URL", "http://closure-compiler.appspot.com/compile");
define("CLOSURE_COMPILER_SIGNATURE", "/* optimized by closure_compiler module using google closure compiler api */");

function closure_compiler_menu() {
	$items = array ();
	$items['admin/settings/closure_compiler'] = array (
		'title' => 'Google Closure Compiler Settings',
		'description' => 'Configure Google Closure Compiler Service settings.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'closure_compiler_settings'
		),
		'access arguments' => array (
			'administer site configuration'
		),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'closure_compiler.admin.inc',

		
	);
	return $items;
}
function closure_compiler_cron() {
	if (variable_get('closure_compiler_service', FALSE) && variable_get('preprocess_js', 0)) {
		closure_compiler_compile();
	}
}
function closure_compiler_compile() {
	$js_path = file_create_path('js');
	$js_files = scandir($js_path);
	$process_limit = variable_get('closure_compiler_process_limit', 0);
	foreach ($js_files as $key => $filename) {
		if (substr($filename, -3, 3) != '.js') {
			unset ($js_files[$key]);
		}
	}
	if (empty ($js_files)) {
		drupal_set_message('No aggregated javascript files found at ' . check_plain($js_path) . '.');
		return;
	}
	// Get ready to send js files to closure compiler service
	$success = $failed = 0;
	$compilation_levels = array (
		'WHITESPACE_ONLY',
		'SIMPLE_OPTIMIZATIONS',
		'ADVANCED_OPTIMIZATIONS'
	);
	$is_path_method = variable_get('closure_compiler_process_method', 0);
	global $base_url;
	foreach ($js_files as $filename) {
		$filepath = $js_path . '/' . $filename;
		// If the file has already been optimized, do not send it to the service
		if (!($js = file_get_contents($filepath)) || (substr($js, 0, strlen(CLOSURE_COMPILER_SIGNATURE)) == CLOSURE_COMPILER_SIGNATURE)) {
			continue;
		}
		$params = array (
			'compilation_level' => $compilation_levels[variable_get('closure_compiler_compilation_level', 1)],
			'output_info' => 'compiled_code',
			'output_format' => 'json'
		);
		// If the data is over 200000 bytes, API will return an error saying POST data is too large, 
		// code_url is the only method possible at that point.
		if ((strlen($js) > 200000)|| $is_path_method) {
			// Path method
			$params['code_url'] = $base_url . '/'. $filepath;
		} else {
			// Content method
			$params['js_code'] = $js;
		}
		$headers = array (
			'Content-Type' => 'application/x-www-form-urlencoded'
		);
		$response = drupal_http_request(CLOSURE_COMPILER_SERVICE_URL, $headers, 'POST', http_build_query($params, '', '&'));
		if ($response->code != 200 || !$response->data) {
			watchdog('closure_compiler', t('Request error: @request', array (
				'@request' => print_r($response, TRUE)
			)));
			$failed++;
			continue;
		}
		// Decode json in the response
		if (!($compiled_code = json_decode($response->data, TRUE)) || !is_array($compiled_code)) {
			watchdog('closure_compiler', t('Failed to parse JSON response: @response', array (
				'@response' => $response->data
			)));
			$failed++;
			continue;
		}
		if (array_key_exists('serverErrors', $compiled_code)) {
			watchdog('closure_compiler', t('Server error: @error', array (
				'@error' => print_r($compiled_code['serverErrors'], TRUE),
				
			)));
			$failed++;
			continue;
		}
		if (array_key_exists('compiledCode', $compiled_code) && !empty($compiled_code['compiledCode'])) {
			// Success, write it back to the file
			$contents = CLOSURE_COMPILER_SIGNATURE . $compiled_code['compiledCode'];
			if (file_put_contents($filepath, $contents)) {
				$success++;
			} else {
				$failed++;
			}
		} else {
			$failed++;
		}
		// Terminate the process if we hit the limit
		if ($process_limit && ($success + $failed) == $process_limit) {
			break;
		}
	}
	watchdog('closure_compiler', t('Successfully compiled @success javascript files, @fail failed.', array (
		'@success' => $success,
		'@fail' => $failed
	)));
}